DOMAIN=""
RED='\033[0;31m'
GREEN='\033[0;32m'
CYAN='\033[0;36m'
NC='\033[0m'
USERID=$(id -u)

heading() {
    echo -e "${GREEN}"
    COUNTER=4
    MESSAGE="\b--- ${@:1}."
    echo -en $MESSAGE
    while [ $COUNTER -gt 0 ]; do
        MESSAGE="${MESSAGE}."
        echo -en "\b.."
        ((COUNTER = COUNTER - 1))
        sleep 0.4s
    done
    MESSAGE=$(echo -e $MESSAGE)
    LENGTH=$(expr length "$MESSAGE")
    echo ""
    printf '=%.0s' $(seq $(($LENGTH - 1)))
    echo -en "${NC}\n"
}

notif() {
    echo -e "${CYAN} - ${@:1}${NC}"
    sleep 0.8s
}

# Create .env file and configure it
env() {
    notif "Generating .env file..."
    cp .env.example .env
}

# Create kubernetes deployment.yaml file and configure it
k8s-deployment-file() {
    notif "Generating deployment.yaml file..."
    cp kubernetes/deployment.example.yaml deployment.yaml
    sed -i "s/INIT.USERID/$USERID/" "deployment.yaml"
    ROOTPATH=$(pwd)
    sed -i "s:INIT.ROOTPATH:$ROOTPATH:" "deployment.yaml"
}

docker-image-file() {
    notif "Generating kubernetes/docker/Dockerfile file..."
    cp kubernetes/Dockerfile.example kubernetes/docker/Dockerfile
    sed -i "s/INIT.USERID/$USERID/" "kubernetes/docker/Dockerfile"
}

# Create MySql Data Directory
mysql-directory() {
    notif "Creating 'mysql' directory"
    mkdir mysql
}

# Set application domain name
set-domain() {
    echo ""
    echo ""
    read -p "Enter the domain [Default: checkout.local]: " DOMAIN
    DOMAIN=${DOMAIN:-checkout.local}
    sed -i "s/INIT.DOMAIN/$DOMAIN/" "deployment.yaml"
    sed -i "s/INIT.DOMAIN/$DOMAIN/" ".env"
    echo ""
    echo ""
}

# Apply kubernetes deployment
deploy() {
    heading "Deploying k8s resources"
    echo -e "${CYAN} | Now skaffold will run the app and show you som outputs.${NC}"
    echo -e "${CYAN} | Wait for the **database migration** log and to see **php entered RUNNING state** output.${NC}"
    echo -e "${CYAN} | The database migration should wait for MySql server to fire up. It might take a while.${NC}"
    echo -e "${CYAN} | After that you can close skaffold log by pressing 'ctrl'+'c'.${NC}"
    read -p "Press enter to continue: " TEMP
    echo -e "\n\n\n"
    skaffold run --tail
}

lara-init() {
    if [ $(pwd) = '/var/www/html' ]; then
        composer i
        php artisan key:generate

        COUNTER=1
        while ! mysqladmin ping -h"devolon-mysql-srv" --silent; do
            notif "Attempting to contact MySql server"$(printf '.%.0s' $(seq $COUNTER))
            ((COUNTER = COUNTER + 1))
        done
        echo ""

        php artisan migrate --seed
        chown -R $WWWUSER:$WWWUSER ./
    else
        notif "Bad environment!"
    fi
}

create-files() {
    heading "Generating files"
    if [ ! -f ".env" ]; then
        env
    else
        notif ".env file exists..."
    fi

    if [ ! -d "mysql" ]; then
        mysql-directory
    else
        notif "mysql directory exists..."
    fi

    if [ ! -f "deployment.yaml" ]; then
        k8s-deployment-file
    else
        notif "deployment.yaml file exists..."
    fi

    if [ ! -f "kubernetes/docker/Dockerfile" ]; then
        docker-image-file
    else
        notif "kubernetes/docker/Dockerfile file exists..."
    fi

    set-domain
}

# Configure environment
start() {
    echo ""
    echo -e "${CYAN}---Welcome---${NC}"

    create-files

    deploy

    notif "Done. access the application on https://$DOMAIN"

    notif "${RED}NOTE!!!${CYAN}: Remember to edit ${RED}hosts${CYAN} file!!!"
}

cmd() {
    heading "Running [${@:1}] command"
    POD=$(kubectl get pods --no-headers -o custom-columns=":metadata.name" | grep devolon-laravel-depl)
    kubectl exec $POD -- "${@:1}"
    kubectl exec $POD -- chown -R $USERID:$USERID ./
    echo ""
    notif "Command [${@:1}] finished..."
}

# Stop all the deployments
stop() {
    heading "Destroying resources"
    if [ ! -f "deployment.yaml" ]; then
        k8s-files
    fi
    skaffold delete
    echo ""
    notif "Application down..."
}

case "$1" in
# Configure environment
start)
    start
    ;;
stop)
    stop
    ;;
cmd)
    cmd "${@:2}"
    ;;
lara-init)
    lara-init
    ;;
*)
    echo " --- Bad command!!! Provide argument."
    exit
    ;;
esac
