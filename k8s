DOMAIN=""
RED='\033[0;31m'
GREEN='\033[0;32m'
CYAN='\033[0;36m'
NC='\033[0m'
USERID=$(id -u)

heading() {
    echo ""
    COUNTER=4
    echo -en "\b ${GREEN}--- ${@:1}.${NC}"
    while [ $COUNTER -gt 0 ]; do
        echo -en "${GREEN}\b..${NC}"
        ((COUNTER = COUNTER - 1))
        sleep 0.8s
    done
    echo ""
    echo ""
}

notif() {
    echo ""
    echo -e "${CYAN}[${@:1}]${NC}"
    echo ""
    sleep 0.8s
}

# Create .env file and configure it
env() {
    heading "Laravel .env file"
    if [ ! -f ".env" ]; then
        notif "Generating .env file..."
        cp .env.example .env
    else
        notif ".env file exists..."
    fi
}

# Create kubernetes deployment.yaml file and configure it
k8s-files() {
    heading "Deployment files"
    if [ ! -f "deployment.yaml" ]; then
        notif "Generating deployment.yaml file..."
        cp kubernetes/deployment.example.yaml deployment.yaml
    else
        notif "deployment.yaml file exists..."
    fi
    if [ ! -f "kubernetes/docker/Dockerfile" ]; then
        notif "Generating kubernetes/docker/Dockerfile file..."
        cp kubernetes/Dockerfile.example kubernetes/docker/Dockerfile
    else
        notif "kubernetes/docker/Dockerfile file exists..."
    fi

    notif "Setting user id and paths..."
    sed -i "s/INIT.USERID/$USERID/" "deployment.yaml"
    sed -i "s/INIT.USERID/$USERID/" "kubernetes/docker/Dockerfile"
    ROOTPATH=$(pwd)
    sed -i "s:INIT.ROOTPATH:$ROOTPATH:" "deployment.yaml"
}

# Create MySql Data Directory
mysql() {
    heading "MySql Directory"
    if [ ! -d "mysql" ]; then
        mkdir mysql
    else
        notif "mysql directory exists..."
    fi
}

# Set application domain name
set-domain() {
    echo ""
    echo ""
    read -p "Enter the domain [Default: checkout.local]: " DOMAIN
    DOMAIN=${DOMAIN:-checkout.local}
    sed -i "s/INIT.DOMAIN/$DOMAIN/" "deployment.yaml"
    sed -i "s/INIT.DOMAIN/$DOMAIN/" ".env"
    echo ""
    echo ""
}

# Apply kubernetes deployment
deploy() {
    heading "Deploying k8s resources"
    echo -e "${CYAN}   Now skaffold will run the app and show you som outputs.${NC}"
    echo -e "${CYAN}   Wait for the **database migration** log and to see **php entered RUNNING state** output.${NC}"
    echo -e "${CYAN}   The database migration should wait for MySql server to fire up. It might take a while.${NC}"
    echo -e "${CYAN}   After that you can close skaffold log by pressing 'ctrl'+'c'.${NC}"
    read -p "Press enter to continue: " TEMP
    skaffold run --tail
}

lara-init() {
    composer i
    php artisan key:generate

    echo "Waiting for mysql server. ${spin[0]}"
    while ! mysqladmin ping -h"devolon-mysql-srv" --silent; do
        echo "."
        sleep 0.5s
    done
    echo ""

    php artisan migrate --seed
    chown -R $WWWUSER:$WWWUSER ./
}

# Configure environment
start() {
    notif "--Welcome--"
    env
    mysql
    k8s-files
    set-domain
    deploy
    # cmd ./k8s lara-init
    notif "Done. access the application on https://$DOMAIN"
    echo -e " --- ${RED}NOTE$NC: Remember to edit ${RED}hosts${NC} file!!!"
}

cmd() {
    heading "Running [${@:1}] command"
    POD=$(kubectl get pods --no-headers -o custom-columns=":metadata.name" | grep devolon-laravel-depl)
    kubectl exec $POD -- "${@:1}"
    kubectl exec $POD -- chown -R $USERID:$USERID ./
    notif "Command [${@:1}] finished..."
}

# Stop all the deployments
stop() {
    heading "Destroying resources"
    if [ ! -f "deployment.yaml" ]; then
        k8s-files
    fi
    skaffold delete
    notif "Application down..."
}

case "$1" in
# Configure environment
start)
    start
    ;;
stop)
    stop
    ;;
cmd)
    cmd "${@:2}"
    ;;
lara-init)
    lara-init
    ;;
*)
    echo " --- Bad command!!! Provide argument."
    exit
    ;;
esac
